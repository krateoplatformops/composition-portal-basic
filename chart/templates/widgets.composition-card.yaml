---
kind: ConfigMap
apiVersion: v1
metadata:
  name: composition-{{ .Release.Name }}-card
  namespace: {{ .Release.Namespace }}
data:
  panel: "false"
  route: /compositions/{{ .Release.Namespace }}/{{ .Release.Name }}
---
apiVersion: templates.krateo.io/v1alpha1
kind: Widget
metadata:
  name: composition-{{ .Release.Name }}-card
  namespace: {{ .Release.Namespace }}
spec:
  type: card
  propsRef:
    name: composition-{{ .Release.Name }}-card
    namespace: {{ .Release.Namespace }}
  actions:
  - template:
      apiVersion: templates.krateo.io/v1alpha1
      resource: collections
      name: composition-{{ .Release.Name }}-tablist
      namespace: {{ .Release.Namespace }}
      verb: GET
  - template:
      apiVersion: {{ .Values.global.compositionApiVersion }}
      resource: {{ .Values.global.compositionResource }}
      name:  {{ .Release.Name }}
      namespace: {{ .Release.Namespace }}
      verb: DELETE
  app:
    template:
      tags: {{ .Release.Namespace }},{{.Chart.Version}}
      title: {{ .Release.Name }}
      content: This is a card for {{ .Release.Name }} composition
      {{- if and .Values.card .Values.card.icon }}
      icon: {{ .Values.card.icon }}
      {{- else }}
      icon: fa-circle-question
      {{- end }}
      color: ${ .getComposition.status.conditions[] | select(.type == "Ready") | if .status == "False" then "orange" elif .status == "True" then "green" else "grey" end }
      status: ${ .getComposition.status.conditions[] | select(.type == "Ready") | "Ready:" + .status }
      date: ${ .getComposition.metadata.creationTimestamp }
  api:
  - name: getComposition
    path: "/apis/{{ .Values.global.compositionApiVersion }}/namespaces/{{ .Release.Namespace }}/{{ .Values.global.compositionResource }}/{{ .Release.Name }}"
    verb: GET